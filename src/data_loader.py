"""
data_loader.py
MÃ³dulo para descargar datos de opciones y precios histÃ³ricos usando yfinance.
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

class OptionsDataLoader:
    """
    Clase para descargar y gestionar datos de opciones de Yahoo Finance.
    """
    
    def __init__(self, ticker='AAPL', data_dir='data'):
        """
        Inicializa el cargador de datos.
        
        Args:
            ticker: SÃ­mbolo del activo
            data_dir: Directorio para guardar datos
        """
        self.ticker = ticker
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        self.stock = yf.Ticker(ticker)
        self.current_price = None
        
    def download_options_data(self):
        """
        Descarga datos de opciones para todas las fechas de vencimiento disponibles.
        
        Returns:
            DataFrame con todas las opciones (calls y puts)
        """
        print(f"\n{'='*60}")
        print(f"DESCARGANDO DATOS DE OPCIONES PARA {self.ticker}")
        print(f"{'='*60}")
        
        # Obtener precio actual
        hist = self.stock.history(period='1d')
        self.current_price = hist['Close'].iloc[-1]
        print(f"\nðŸ“Š Precio actual de {self.ticker}: ${self.current_price:.2f}")
        
        # Obtener fechas de vencimiento disponibles
        expirations = self.stock.options
        print(f"ðŸ“… Fechas de vencimiento disponibles: {len(expirations)}")
        
        if len(expirations) == 0:
            raise ValueError(f"No hay opciones disponibles para {self.ticker}")
        
        all_options = []
        
        for exp_date in expirations:
            try:
                # Obtener cadena de opciones para esta fecha
                opt_chain = self.stock.option_chain(exp_date)
                
                # Procesar calls
                calls = opt_chain.calls.copy()
                calls['type'] = 'call'
                calls['expiration'] = exp_date
                
                # Procesar puts
                puts = opt_chain.puts.copy()
                puts['type'] = 'put'
                puts['expiration'] = exp_date
                
                # Combinar
                options = pd.concat([calls, puts], ignore_index=True)
                all_options.append(options)
                
                print(f"  âœ“ {exp_date}: {len(calls)} calls, {len(puts)} puts")
                
            except Exception as e:
                print(f"  âœ— Error en {exp_date}: {str(e)}")
                continue
        
        if not all_options:
            raise ValueError("No se pudieron descargar opciones")
        
        # Combinar todas las opciones
        df_options = pd.concat(all_options, ignore_index=True)
        
        # AÃ±adir informaciÃ³n adicional
        df_options['stockPrice'] = self.current_price
        df_options['date'] = datetime.now().strftime('%Y-%m-%d')
        
        # Calcular dÃ­as hasta vencimiento
        df_options['expiration'] = pd.to_datetime(df_options['expiration'])
        df_options['T_days'] = (df_options['expiration'] - pd.Timestamp.now()).dt.days
        df_options['T_years'] = df_options['T_days'] / 365.0
        
        # Calcular moneyness
        df_options['moneyness'] = df_options['strike'] / self.current_price
        
        print(f"\nâœ… Total de opciones descargadas: {len(df_options)}")
        
        # Guardar archivos separados
        self._save_options_data(df_options)
        
        return df_options
    
    def _save_options_data(self, df_options):
        """
        Guarda los datos de opciones en archivos CSV separados.
        
        Args:
            df_options: DataFrame con todas las opciones
        """
        # Archivo completo
        file_all = self.data_dir / f'{self.ticker}_options.csv'
        df_options.to_csv(file_all, index=False)
        print(f"\nðŸ’¾ Guardado: {file_all}")
        
        # Calls separados
        df_calls = df_options[df_options['type'] == 'call']
        file_calls = self.data_dir / f'{self.ticker}_calls.csv'
        df_calls.to_csv(file_calls, index=False)
        print(f"ðŸ’¾ Guardado: {file_calls} ({len(df_calls)} calls)")
        
        # Puts separados
        df_puts = df_options[df_options['type'] == 'put']
        file_puts = self.data_dir / f'{self.ticker}_puts.csv'
        df_puts.to_csv(file_puts, index=False)
        print(f"ðŸ’¾ Guardado: {file_puts} ({len(df_puts)} puts)")
    
    def download_historical_data(self, years=3):
        """
        Descarga datos histÃ³ricos de precios.
        
        Args:
            years: AÃ±os de historia a descargar
            
        Returns:
            DataFrame con precios histÃ³ricos
        """
        print(f"\n{'='*60}")
        print(f"DESCARGANDO DATOS HISTÃ“RICOS DE {self.ticker}")
        print(f"{'='*60}")
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=years*365)
        
        print(f"\nðŸ“… PerÃ­odo: {start_date.date()} a {end_date.date()}")
        
        # Descargar datos
        df_hist = self.stock.history(start=start_date, end=end_date)
        
        if df_hist.empty:
            raise ValueError(f"No se pudieron descargar datos histÃ³ricos para {self.ticker}")
        
        # Calcular retornos logarÃ­tmicos
        df_hist['log_return'] = np.log(df_hist['Close'] / df_hist['Close'].shift(1))
        df_hist['simple_return'] = df_hist['Close'].pct_change()
        
        # Guardar
        file_hist = self.data_dir / f'{self.ticker}_historical.csv'
        df_hist.to_csv(file_hist)
        print(f"\nðŸ’¾ Guardado: {file_hist}")
        print(f"ðŸ“Š {len(df_hist)} dÃ­as de datos histÃ³ricos")
        print(f"ðŸ“ˆ Retorno promedio diario: {df_hist['log_return'].mean():.4%}")
        print(f"ðŸ“‰ Volatilidad diaria: {df_hist['log_return'].std():.4%}")
        print(f"ðŸ“‰ Volatilidad anualizada: {df_hist['log_return'].std() * np.sqrt(252):.4%}")
        
        return df_hist
    
    def load_saved_data(self, data_type='options'):
        """
        Carga datos guardados previamente.
        
        Args:
            data_type: 'options', 'calls', 'puts', o 'historical'
            
        Returns:
            DataFrame con los datos
        """
        file_mapping = {
            'options': f'{self.ticker}_options.csv',
            'calls': f'{self.ticker}_calls.csv',
            'puts': f'{self.ticker}_puts.csv',
            'historical': f'{self.ticker}_historical.csv'
        }
        
        if data_type not in file_mapping:
            raise ValueError(f"data_type debe ser uno de: {list(file_mapping.keys())}")
        
        file_path = self.data_dir / file_mapping[data_type]
        
        if not file_path.exists():
            raise FileNotFoundError(f"No se encuentra el archivo: {file_path}")
        
        df = pd.read_csv(file_path)
        
        # Convertir fechas si es necesario
        if 'expiration' in df.columns:
            df['expiration'] = pd.to_datetime(df['expiration'])
        
        if data_type == 'historical':
            df['Date'] = pd.to_datetime(df['Date']) if 'Date' in df.columns else df.index
            df = df.set_index('Date')
        
        print(f"âœ“ Cargados {len(df)} registros de {file_path.name}")
        
        return df


def main():
    """
    FunciÃ³n principal para ejecutar la descarga de datos.
    """
    # Crear instancia del cargador
    loader = OptionsDataLoader(ticker='AAPL', data_dir='data')
    
    # Descargar datos de opciones
    df_options = loader.download_options_data()
    
    # Descargar datos histÃ³ricos (3 aÃ±os)
    df_historical = loader.download_historical_data(years=3)
    
    print(f"\n{'='*60}")
    print("âœ… DESCARGA COMPLETADA")
    print(f"{'='*60}")
    print(f"\nResumen:")
    print(f"  â€¢ Opciones totales: {len(df_options)}")
    print(f"  â€¢ Vencimientos Ãºnicos: {df_options['expiration'].nunique()}")
    print(f"  â€¢ DÃ­as histÃ³ricos: {len(df_historical)}")
    print(f"\nArchivos guardados en: data/")


if __name__ == "__main__":
    main()